# CI/CCD Pipeline
name: CI/CD Pipeline Demo
on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - v1
jobs:
  #Test's job
  tests:
    name: Unit tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run Tests
      - name: Run Tests
        run: mvn -B test
  sonarscan:
    needs: tests
    name: sonar-scan
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2    
      - name : Build to analyze
        run: mvn -B package -DskipTests --file pom.xml    
      -  name: analyze
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any       
           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}     
         run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=deepali-arvind_cicd
  build:
    #Depends on sonar's job
    needs: sonarscan
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml    
      #Build the application using Maven
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          #Set artifact name
          name: artifact
          #From this path
          path: target/ebs-demo-0.0.1-SNAPSHOT.jar
  #Deploy's job
  deployuat:
    #Depends on build's job
    needs: build
    name: Deploy to dev
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    environment:
      name: dev env
      url: http://cicdspringbootdemo-env.eba-mdjyeshp.us-east-2.elasticbeanstalk.com/
    steps:
      - name: Download JAR
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v2
        with:
          name: artifact
      #Deploy the artifact (JAR) into AWS Beanstalk
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v13
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          use_existing_version_if_available: false
          application_name: ci-cd-spring-boot-demo
          environment_name: Cicdspringbootdemo-env
          version_label: ${{github.SHA}}
          region: us-east-2
          deployment_package: ebs-demo-0.0.1-SNAPSHOT.jar        

  deploy-prod:
    #Depends on build's job
    needs: deployuat
    name: Deploy to prod
    if: github.ref == 'refs/heads/main'
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    environment:
      name: prod env
      url: http://cicdspringbootdemoprod-env.eba-9uwzujf5.us-east-2.elasticbeanstalk.com/
    steps:
      - name: Download JAR
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v2
        with:
          name: artifact
      #Deploy the artifact (JAR) into AWS Beanstalk
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v13
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          use_existing_version_if_available: false
          application_name: ci-cd-spring-boot-demo-prod
          environment_name: Cicdspringbootdemoprod-env
          version_label: ${{github.SHA}}
          region: us-east-2
          deployment_package: ebs-demo-0.0.1-SNAPSHOT.jar

